require "spec_helper"
require_relative "../../lib/musicology/heptatonic_scale"
require_relative "../../lib/musicology/note_names"
require_relative "../../lib/musicology/tones"

describe Musicology::HeptatonicScale do
  describe "#notes" do
    context "using a major scale" do
      it "returns the correct notes when starting from C" do
        tones = [0, 2, 4, 5, 7, 9, 11].map { |index| Musicology.Tone(index) }
        starting_note = Musicology.NoteSpelling(:c, :natural)
        scale = described_class.new(tones, starting_note: starting_note)

        expect(spell(scale)).to eq(
          ["C", "D", "E", "F", "G", "A", "B"],
        )
      end

      it "returns the correct notes when starting from a white key other than C" do
        tones = [0, 2, 4, 5, 7, 9, 11].map { |index| Musicology.Tone(index) }
        starting_note = Musicology.NoteSpelling(:a, :natural)
        scale = described_class.new(tones, starting_note: starting_note)

        expect(spell(scale)).to eq(
          ["A", "B", "C‚ôØ", "D", "E", "F‚ôØ", "G‚ôØ"],
        )
      end

      it "returns the correct notes when starting from a 'flat' black key" do
        tones = [0, 2, 4, 5, 7, 9, 11].map { |index| Musicology.Tone(index) }
        starting_note = Musicology.NoteSpelling(:b, :flat)
        scale = described_class.new(tones, starting_note: starting_note)

        expect(spell(scale)).to eq(
          ["B‚ô≠", "C", "D", "E‚ô≠", "F", "G", "A"],
        )
      end

      it "returns the correct notes when starting from a 'sharp' black key" do
        tones = [0, 2, 4, 5, 7, 9, 11].map { |index| Musicology.Tone(index) }
        starting_note = Musicology.NoteSpelling(:f, :sharp)
        scale = described_class.new(tones, starting_note: starting_note)

        expect(spell(scale)).to eq(
          ["F‚ôØ", "G‚ôØ", "A‚ôØ", "B", "C‚ôØ", "D‚ôØ", "E‚ôØ"],
        )
      end
    end

    context "using a harmonic minor scale" do
      it "returns the correct notes when starting from C" do
        tones = [0, 2, 3, 5, 7, 8, 11].map { |index| Musicology.Tone(index) }
        starting_note = Musicology.NoteSpelling(:c, :natural)
        scale = described_class.new(tones, starting_note: starting_note)

        expect(spell(scale)).to eq(
          ["C", "D", "E‚ô≠", "F", "G", "A‚ô≠", "B"],
        )
      end

      it "returns the correct notes when starting from a white key other than C" do
        tones = [0, 2, 3, 5, 7, 8, 11].map { |index| Musicology.Tone(index) }
        starting_note = Musicology.NoteSpelling(:a, :natural)
        scale = described_class.new(tones, starting_note: starting_note)

        expect(spell(scale)).to eq(
          ["A", "B", "C", "D", "E", "F", "G‚ôØ"],
        )
      end

      it "returns the correct notes when starting from a 'flat' black key" do
        tones = [0, 2, 3, 5, 7, 8, 11].map { |index| Musicology.Tone(index) }
        starting_note = Musicology.NoteSpelling(:b, :flat)
        scale = described_class.new(tones, starting_note: starting_note)

        expect(spell(scale)).to eq(
          ["B‚ô≠", "C", "D‚ô≠", "E‚ô≠", "F", "G‚ô≠", "A"],
        )
      end

      it "returns the correct notes when starting from a 'sharp' black key" do
        tones = [0, 2, 3, 5, 7, 8, 11].map { |index| Musicology.Tone(index) }
        starting_note = Musicology.NoteSpelling(:f, :sharp)
        scale = described_class.new(tones, starting_note: starting_note)

        expect(spell(scale)).to eq(
          ["F‚ôØ", "G‚ôØ", "A", "B", "C‚ôØ", "D", "E‚ôØ"],
        )
      end

      it "returns the correct notes when some letters need to be repeated" do
        tones = [0, 2, 4, 5, 6, 7, 9].map { |index| Musicology.Tone(index) }
        starting_note = Musicology.NoteSpelling(:c, :flat)
        scale = described_class.new(tones, starting_note: starting_note)

        expect(spell(scale)).to eq(
          ["C‚ô≠", "D‚ô≠", "E‚ô≠", "F‚ô≠", "GùÑ´", "G‚ô≠", "A‚ô≠"],
        )
      end
    end
  end

  def spell(scale)
    scale.notes.map { |note| note.spelling.to_s }
  end
end
